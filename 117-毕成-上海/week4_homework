#week4作业

"""

在kmeans聚类基础上，实现根据类内距离排序，输出结果

"""

import math
import re
import json
import jieba
import numpy as np
from gensim.models import Word2Vec
from sklearn.cluster import KMeans
from collections import defaultdict

def load_word2vec_model(path):
    model = Word2Vec.load(path)
    return model

def load_sentence(path):
    sentences = set()
    with open(path, encoding="utf8") as f:
        for line in f:
            sentence = line.strip()
            sentences.add(" ".join(jieba.cut(sentence)))
    print("获取句子数量：", len(sentences))
    return sentences
    
 #将文本向量化
def sentences_to_vectors(sentences, model):
    vectors = []
    for sentence in sentences:
        words = sentence.split()  #sentence是分好词的，空格分开
        vector = np.zeros(model.vector_size)
        #所有词的向量相加求平均，作为句子向量
        for word in words:
            try:
                vector += model.wv[word]
            except KeyError:
                #部分词在训练中未出现，用全0向量代替
                vector += np.zeros(model.vector_size)
        vectors.append(vector / len(words))
    return np.array(vectors)
    
 def _distance(p1, p2):
    #计算两点间距
    tmp = 0
    for i in range(len(p1)):
        tmp += pow(p1[i] - p2[i], 2)
    return pow(tmp, 0.5)
    
def main():
    model = load_word2vec_model("model.w2v") #加载词向量模型
    sentences = load_sentence("titles.txt")  #加载所有标题
    vectors = sentences_to_vectors(sentences, model)   #将所有标题向量化

    n_clusters = int(math.sqrt(len(sentences)))  #指定聚类数量
    print("指定聚类数量：", n_clusters)
    kmeans = KMeans(n_clusters)  #定义一个kmeans计算类
    kmeans.fit(vectors)          #进行聚类计算

    sentence_label_dict = defaultdict(dict)
    _clusters = kmeans.cluster_centers_ # cluster centers matrix 42x100
    
    for sentence, vector, label in zip(sentences, vectors, kmeans.labels_):  #取出句子, vectors和标签
        cluster = _clusters[label] # cluster center corresponding to lable
        distance = _distance(cluster, vector) # calculate distance of each sentence in the same label
        sentence_label_dict[label][sentence] = distance         #同标签的放到一起
        
    for label, value in sentence_label_dict.items():     # sorting according to dict value
        sorted_values = {k: v for k, v in sorted(value.items(), key=lambda item: item[1])}
        sentence_label_dict[label] = sorted_values
        #print(sentence_label_dict[22])
  
    for label, sentences in sentence_label_dict.items():
        print("cluster %s :" % label)
        sentences = list(sentences.keys()) # convert dict keys to list
        #print(sentences)
        for i in range(min(10, len(sentences))):  #随便打印几个，太多了看不过来
            print(sentences[i].replace(" ", ""))
        print("---------")
        

if __name__ == "__main__":
    main()
